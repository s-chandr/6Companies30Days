class Solution {
    class MyPair{
        int i;
        int j;
        MyPair(int i,int j){
            this.i=i;
            this.j=j;
        }
    }
    public Boolean isValid( int i , int j , int n, int m , int[][] grid){
    
        if(i < 0 || i >= n || j < 0 || j >= m ||grid[i][j] != 1 )
                return false;
        return true;
    }
    public int orangesRotting(int[][] grid) {
        int N = grid.length;
        int M = grid[0].length;
        int fresh = 0 ;
        
        if(M == 1 && N == 1){
            if(grid[0][0] == 2 || grid[0][0] == 0) return 0;
            else return -1;
        }
        Queue<MyPair> q = new LinkedList<>();  
        for(int i = 0 ; i < grid.length ; i ++){
            for( int j = 0 ; j < grid[i].length ; j ++){
                if(grid[i][j] == 2)
                    //visit(grid , i , j , N ,M);
                {   q.add(new MyPair(i,j));
                       //fresh+=1; 
                }
                else if (grid[i][j] == 1)
                {
                    fresh ++;
                }
            }
        }  
        if ( fresh == 0)
            return 0;
       
       
        int ans  = -1 ;
        
        while(!q.isEmpty()){
            
            int size = q.size();
            while(size>0){
                
                
                // if(!q.isEmpty()){
                MyPair p = q.remove();
                int i = p.i;
                int j = p.j;                
                //q.remove();
                if(isValid(i+1,j,N,M,grid))
                    { grid[i+1][j] = 2 ;   
                    q.add(new MyPair(i+1,j));fresh--;}
                if(isValid(i,j+1,N,M,grid))
                    {grid[i][j+1] =  2 ;
                    q.add(new MyPair(i,j+1));fresh--;}
                if(isValid(i-1,j,N,M,grid))
                    {grid[i-1][j] = 2 ;
                    q.add(new MyPair(i-1,j));fresh--;}
                if(isValid(i,j-1,N,M,grid))
                    {grid[i][j-1] = 2 ;
                    q.add(new MyPair(i,j-1));fresh--;}

                
                size--;
            
        }
            ans +=1;
                
        }
        if(fresh>0) 
            return -1;
        return ans ;
    }
}
